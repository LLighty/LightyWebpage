{"version":3,"sources":["client/app/Components/Function.js","client/app/pages/Home.js","client/app/pages/About.js","client/app/pages/Resume.js","client/app/pages/Contact.js","client/app/pages/Main.js","serviceWorker.js","index.js"],"names":["potentialQuotes","_callee2","JSONfile","i","regenerator_default","a","wrap","_context2","prev","next","fetch","then","response","json","data","children","map","post","is_video","media","url","includes","catch","error","console","log","sent","length","abrupt","indexOf","stop","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","picture","quote","file","play","_this2","setState","Math","floor","random","_GetCutePicture","apply","arguments","GetCutePicture","result","react_default","createElement","class","src","alt","id","Component","About","Resume","Contact","AppRouter","react_router_dom","to","react_router","path","exact","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","pages_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5ae9b44.chunk.js","sourcesContent":["\r\n\r\nvar potentialQuotes = [\r\n    '\"Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\"- Martin Golding',\r\n    '\"Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.\" - Linus Torvalds',\r\n    '“To iterate is human, to recurse divine.” - L. Peter Deutsch',\r\n    '“Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.” - Alan Kay',\r\n    '\"Measuring programming progress by lines of code is like measuring aircraft building progress by weight.\" - Bill Gates',\r\n    '\"People think that computer science is the art of geniuses but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones.\" - Donald Knuth',\r\n    '“Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris.” - Larry Wall',\r\n    '“The best programmers are not marginally better than merely good ones. They are an order-of-magnitude better, measured by whatever standard: conceptual creativity, speed, ingenuity of design, or problem-solving ability.” - Randall E. Stross',\r\n    '“If McDonalds were run like a software company, one out of every hundred Big Macs would give you food poisoning, and the response would be, ‘We’re sorry, here’s a coupon for two more.’ “ - Mark Minasi',\r\n    '\"Beware of bugs in the above code; I have only proved it correct, not tried it.\" - Donald E. Knuth',\r\n    '\"If Java had true garbage collection, most programs would delete themselves upon execution.\" - Robert Sewell',\r\n    '\"If debugging is the process of removing software bugs, then programming must be the process of putting them in.\" - E. W. Dijkstra'\r\n];\r\n\r\n/* Function which sends a fetch request to the Reddit JSON file\r\n* Returns the JSON file and maps all the responses to an array of image urls\r\n* Reason for the mapping is I can randomise from the downloaded images in other functions*/\r\nfunction getFluffyPicture(){\r\n    return fetch(\"https://www.reddit.com/r/Floof/top.json\")\r\n    .then((response) => response.json())\r\n    .then(response => response.data.children)\r\n    .then( (response) => {\r\n        return response.map( (post) => {\r\n            if (post.data.is_video || post.data.media != null || post.data.url.includes(\"gifv\")){\r\n                return null;\r\n            } else {\r\n                return post.data.url\r\n            }\r\n        })\r\n    })\r\n    .catch(function(error){\r\n        console.log(error);\r\n        return \"error\";\r\n    })\r\n}\r\n\r\n/* Very basic function which randomly selects a quote stored in the var potentialQuotes */\r\nexport function GetProgrammingQuote(){\r\n    //console.log(potentialQuotes[Math.floor(Math.random() * potentialQuotes.length)]);\r\n    return potentialQuotes[Math.floor(Math.random() * potentialQuotes.length)];\r\n}\r\n\r\n/*Gets a programming quote from the website \"quotes.stormconsultancy.co.uk\" \r\n* Deprecated since it references an insecure resource*/\r\nexport async function GetProgrammingQuotes(){\r\n    return fetch(\"http://quotes.stormconsultancy.co.uk/random.json\")\r\n    .then((response) => response.json())\r\n    .then((response) => {\r\n        return '\"' + response.quote + '\"' + \", \" + response.author;\r\n    })\r\n    .catch(function(error){\r\n        return \"error\";\r\n    })\r\n}\r\n\r\n/*Uses the getFluffyPicture to grab a bunch of picture URLS\r\n* Then selects the first one and returns it */\r\nexport async function GetCutePicture(){\r\n    var JSONfile = await getFluffyPicture();\r\n    for(var i = 0; i < JSONfile.length; i++){\r\n        //console.log(JSONfile[i]);\r\n        if(JSONfile[i] !== null) {\r\n            JSONfile = JSONfile[i];\r\n            break;\r\n        }\r\n    }\r\n    return JSONfile.indexOf(\"http\") !== -1 ? JSONfile : \"error\";\r\n}","import React, {Component} from 'react';\r\n\r\nimport { GetCutePicture, GetProgrammingQuote } from '../Components/Function';\r\n\r\nimport './Home.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = { picture: \"\", quote: \"\", file: \"img\", play: \"\" };\r\n  }\r\n\r\n  componentWillMount(){\r\n    this.setState({quote: GetProgrammingQuote()});\r\n\r\n    var picture = GetCutePicture();\r\n\r\n    picture.then(result => {\r\n      if(result !== \"error\" || result !== \"\"){\r\n        this.setState({picture: result});\r\n      } else {\r\n        \r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n      return (\r\n          <div>\r\n            <div class=\"split left\">\r\n              hello\r\n            </div>\r\n            <div class=\"split right top\">\r\n              <h2 class =\"centre\">\r\n                {this.state.quote}\r\n              </h2>\r\n            </div>\r\n            <div class=\"split right bottom\">\r\n              <img src={this.state.picture} alt=\"Everyone likes fluffy pictures!\" id=\"img\"/>\r\n              <div>\r\n                Hello is it me you're looking for\r\n              </div>\r\n            </div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, {Component} from 'react';\r\n\r\nimport \"./About.css\";\r\n\r\nclass About extends Component {\r\n  render() {\r\n      return (\r\n          <div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, {Component} from 'react';\r\n\r\nimport './Resume.css';\r\n\r\nclass Resume extends Component {\r\n  render() {\r\n      return (\r\n          <div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Resume;\r\n","import React, {Component} from 'react';\r\n\r\nimport './Contact.css';\r\n\r\nclass Contact extends Component {\r\n  render() {\r\n      return (\r\n          <div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport Home from \"./Home\";\r\n\r\nimport \"./Main.css\";\r\nimport About from \"./About\";\r\nimport Resume from \"./Resume\";\r\nimport Contact from \"./Contact\";\r\n\r\nfunction AppRouter() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul id=\"nav\">\r\n            <li>\r\n              <Link to=\"/LightyWebpage/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/LightyWebpage/about/\">About Me</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/LightyWebpage/resume/\">Resume</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/LightyWebpage/contact/\">Contact</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <Route path=\"/LightyWebpage/\" exact   component={Home} />\r\n        <Route path=\"/LightyWebpage/about/\"   component={About} />\r\n        <Route path=\"/LightyWebpage/resume/\"  component={Resume} />\r\n        <Route path=\"/LightyWebpage/contact/\" component={Contact} />\r\n\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default AppRouter;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport Main from './client/app/pages/Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Main />\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}